/* autogenerated by Processing revision 1286 on 2025-10-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SpaceGame extends PApplet {

// Kirubashini S | September 17th 2025 | SpaceGame
ArrayList<Rock> candy = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();
ArrayList<Powerup> powups = new ArrayList<Powerup>();
SpaceShip cookie;
int score, rockspassed, level, rtime;
Timer chipTimer, puTimer;
PImage start;
PImage gameover;
boolean play;

SoundFile sparkle;



 public void setup() {
  /* size commented out by preprocessor */;
  background(20);
  cookie = new SpaceShip();
  level = 1;
  score = 0;
  rockspassed =0;
  rtime = 1000;
  //Timer info
  chipTimer = new Timer(rtime);
  puTimer = new Timer(2000);
  puTimer.start();
  chipTimer.start();
  play = false;
  start = loadImage("start.png");
  gameover = loadImage("gameover.png");
  sparkle = new SoundFile(this, "sparkle.wav");


  //image info
}

 public void draw () {
  if (!play) {
    startScreen();
  } else {
    
    background(0xFF8BD5F6);
    
    if (frameCount % 1000 == 0) {
      level++;
      //chipTimer.totalTime -= 50;
      rtime-= 200;
    }


    if (puTimer.isFinished()) {
      powups.add(new Powerup());
      puTimer.start();
    }
    for (int i = 0; i < powups.size(); i ++) {
      Powerup pu = powups.get(i);
      pu.display();
      pu.move();
      if (pu.intersect(cookie) && pu.type =='h') {
        powups.remove(pu);
        cookie.health += 100;
      } else if (pu.intersect(cookie) && pu.type =='a') {
        cookie.ammo += 100;
        powups.remove(pu);
        if (pu.reachedBottom()) {
          powups.remove(pu);
        }
      }
    }


    stars.add(new Star());
    for (int i=0; i<stars.size(); i++) {
      Star s = stars.get(i);
      s.display();
      s.move();
      if (s.reachedBottom()) {
        stars.remove(s);
      }
    }

    // Distributes rock on timer
    if (chipTimer.isFinished()) {
      candy.add(new Rock());
      chipTimer.totalTime = rtime;
      chipTimer.start();
    }


    for (int i = 0; i < candy.size(); i++) {
      Rock rock = candy.get(i);
      rock.move();
      rock.display();

      if (cookie.intersect(rock)) {
        candy.remove(rock);
        score+= 5;
        cookie.health-= 5;
      }

      if (rock.reachedBottom()) {
        candy.remove(rock);
        i--;
      }
      println(candy.size());
    }
    

    // Display and move lasers
    for (int i = 0; i < lasers.size(); i++) {
      Laser laser = lasers.get(i);
      for (int j = 0; j < candy.size(); j++) {
        Rock rock = candy.get(j);
        if (laser.intersect(rock)) {
          rock.diam -= 10;
          if (rock.diam <5) {
            candy.remove(rock);
          }
          score += 5;
          lasers.remove(laser);
        }
      }
      laser.display();
      laser.move();
    }

    cookie.display();
    infoPanel();
    cookie.move(mouseX, mouseY);
    
    
    if (cookie.health<1){
      gameOver();
    }
    if (cookie.ammo<1){
      gameOver();
    }
  }
}

   public void mousePressed() {
    
    if (!sparkle.isPlaying()) {
        sparkle.play();
    }
    
    lasers.add(new Laser(cookie.x, cookie.y));
    cookie.ammo--;
    
  }

   public void infoPanel() {
    rectMode(CENTER);
    fill(127, 127);
    rect(width/2, 20, width, 40);
    fill(255);
    textSize(20);
    text("Score:" + score, 20, 36);
    text("Health:" + cookie.health, 150, 36);
    text("Level:" +  level, 450, 36);
    text("Ammo:" + cookie.ammo, 300, 36);
    //text("candy passed:" + rockspassed, 410, 36);
  }

   public void startScreen() {
    //start = loadImage("start.png");
    //imageMode(CENTER);
    image(start,0,0);
    if(mousePressed) {
      play = true;
    }
    textSize(100);
    text("Start" ,300,150);
    
  }

   public void gameOver() {
    //ackground (#D8BFD8);
    //ill(255);
    //text("Game Over :(", 205, 300);
    image(gameover,325,325);
    
    textSize(80);
    text("Game Over" ,230,150);
    textSize(50);
    text("Level: " + level, 340,200);
    noLoop();
  }
class Laser {
  // Member Varaibles
  int x, y, w, h, speed,lasersCount;
  PImage chip;

  //Constructor
  Laser(int x, int y) {
    this.x = x;
    this.y= y;
    w = 5;
    h = 10;
    speed = 5;
    chip = loadImage("chip.png");
  }
  // Member Methods
   public void display() {
    imageMode(CENTER);
    chip.resize(50,50);
    image(chip,x,y);
 
    
    
  }


   public void move() {
    y=y-speed;
  }


   public boolean reachedTop() {
    if (y<-20) {
      return true;
    } else {
      return false;
    }
  }

   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Powerup {
  int x, y, diam, speed;
  char type;
  Powerup() {

    x= PApplet.parseInt(random(width));
    y= -100;
    diam = PApplet.parseInt(random(20, 80));
    speed = PApplet.parseInt(random(1, 5));

    int rand = PApplet.parseInt(random(4));
    if (random(10)>6.6f) {
      type = 'h';
    } else if (random(10)>6.6f) {
      type = 'a';
    } 
  }

   public void display() {
    if (type== 'h') {
      fill (0xFFFFB803);
      ellipse(x, y, diam, diam);
    }
    if (type== 'a') {
      fill (0xFF34116F);
      ellipse(x, y, diam, diam);
    }
  }


   public void move () {
    y += speed;
  }

   public boolean reachedBottom () {
    if (y>height+50) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(SpaceShip s) {
    float d = dist(x, y, s.x, s.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Rock {
  int x, y, diam, speed;
  PImage r1;
  Rock() {;
    x= PApplet.parseInt(random(width));
    y= -100;
    diam = PApplet.parseInt(random(100, 100));
    speed = PApplet.parseInt(random(1, 5));
    if (random(10)>6.6f) {
      r1 = loadImage("lolly.png");
    } else if (random(10)>5.0f) {
      r1 = loadImage("cotton.png");
    } else {
     r1 = loadImage("apple.png");
    }
  }

   public void display() {
    imageMode(CENTER);
    r1.resize(diam,diam);
    image(r1,x,y);
  }


   public void move () {
    y=y+speed;
  }

   public boolean reachedBottom () {
    if (y>height+50) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(SpaceShip s) {
    float d = dist(x, y, s.x, s.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class SpaceShip {
  // Member Variables
  int x, y, w,health,turretCount, ammo;
  PImage ship;

  // Constructor
  SpaceShip() {
    x = width/2;
    y = height/2;
    health = 10;
    w = 100;
    ammo= 40;
    turretCount = 2;
    ship = loadImage ("cookie.png");
    
  }

  // Member Methods
   public void display() {
    imageMode(CENTER);
    image(ship,x,y);
    

  
  }

   public void move (int x, int y) {
    this. x = x;
    this.y = y;
  }


   public void fire () {
  }

   public boolean intersect(Rock c) {
   float d = dist(x, y, c.x, c.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  int x, y, diam, speed;
  PImage cloud;

  Star() {
    x= PApplet.parseInt(random(width));
    y = -10;
    diam = PApplet.parseInt(random(80, 70));
    speed = PApplet.parseInt(random(-80, 6));
    cloud = loadImage ("cloud.png");
  }

   public void display() {
    fill(0xFFFFFFFF);
    stroke(0xFFFFFFFF);
    //ellipse(x, y, diam, diam);
    image(cloud,x,y,diam,diam);
  }


   public void move () {
    y+=speed;
  }

   public boolean reachedBottom () {
    if (y>height+5) {
      return true;
    } else {
      return false;
    }
  }
}

// by Daniel Shiffman
class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
   public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}
  


  public void settings() { size(650, 650); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SpaceGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
